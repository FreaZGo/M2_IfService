package fr.uge.sw.marketplace;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.StringJoiner;

import fr.uge.service_web.project.shared.Ecorpsharedinterface;
import fr.uge.service_web.project.shared.IOffer;

public class MarketPlace {
	private final HashMap<Integer, IOffer> mapOffers = new HashMap<>();
	Ecorpsharedinterface lib;
	
	public MarketPlace() throws MalformedURLException, RemoteException, NotBoundException {
		this.lib = (Ecorpsharedinterface) Naming.lookup("ecorpsharedinterface");	
	}
	
	public void updateMarket() throws MalformedURLException, RemoteException, NotBoundException {
		Ecorpsharedinterface lib = (Ecorpsharedinterface) Naming.lookup("ecorpsharedinterface");
	}
	
	public void fillOffersList(Set<IOffer> offers) {
		for (IOffer offer : offers) {
			int id = offer.hashCode();
			
			while (mapOffers.containsKey(id)) {
				id++;
			}
			
			mapOffers.put(id, offer);
			
		}
	}
	
	public IOffer getOfferById(int id) {
		return mapOffers.get(id);
	}

	@Override
	public String toString() {
		StringJoiner sj = new StringJoiner("\n---------------", "---------------\n", "---------------");
		
		mapOffers.forEach((k, v) -> {
			
			try {
				sj.add(k.toString());
				sj.add(v.getProduct().getName());
				sj.add(v.getProduct().getDescription());
				sj.add(Float.toString(v.getPrice()));
				sj.add(Integer.toString(v.getStock()));
				sj.add(v.getSeller().toString());
				
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		});
					
		return sj.toString();
	}
	
	
}
